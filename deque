#include <iostream>
#include <string>
#define random(min,max) (min + rand() % (max - min + 1))
using namespace std;
const int SIZE = 5;

template <typename T>
class MyDeque  {
private:
    T* elements;
    int capacity;
    int size;
public:
    MyDeque () :capacity(10), size(0) {
        elements = new T[capacity];
    }

    ~MyDeque () {
        delete[] this->elements;
    }

    MyDeque(const MyDeque & newQueue) {//конструктор копирования
        this->capacity = newQueue.capacity;
        this->size = newQueue.size;
        this->elements = new T[newQueue.capacity];
        for (int i = 0; i <= newQueue.size; i++)
        {
            this->elements[i] = newQueue.elements[i];
        }
    }

    MyDeque & operator=(const MyDeque & newQueue) {
        delete[] this->elements;
        this->capacity = newQueue.capacity;
        this->size = newQueue.size;
        this->elements = new T[newQueue.capacity];
        for (int i = 0; i <= newQueue.size; i++)
        {
            this->elements[i] = newQueue.elements[i];
        }
        return *this;
    }

    bool operator ==(const MyDeque & newQueue) {
        if (this->size != newQueue.size) {
            return false;
        }
        else {
            for (int i = 0; i < this->size; i++)
            {
                if (this->elements[i] != newQueue.elements[i]) {
                    return false;
                }
            }
            return true;
        }
    }

    void pushBack(const T& elem) {
        if (size == capacity) {
            capacity *= 2;
            T* buf = new T[capacity];
            for (int i = 0; i < size; i++)
            {
                buf[i] = elements[i];
            }
            delete[]this->elements;
            elements = buf;
        }
        elements[size++] = elem;

    }

    void pushFront(const T& elem) {
        if (size >= capacity) {
            capacity *= 2;
            T* buf = new T[capacity];
            for (int i = 0; i < size; i++)
            {
                buf[i] = elements[i];
            }
            delete[]this->elements;
            elements = buf;
        }
        for (int i = size; i > 0; i--)
        {
            swap(elements[i], elements[i - 1]);
        }
        elements[0] = elem;
        size++;
    }

    bool empty() {
        if (size < 0) {
            return true;
        }
        return false;
    }

    void clear() {
        delete[] this->elements;
        capacity = 10;
        size = 0;
        elements = new T[capacity];
    }

    void popFront() {
        size--;
        for (int i = 0; i < size; i++)
        {
            swap(elements[i], elements[i + 1]);
        }
    }

    void popBack() {
        if (empty())
        {
            throw out_of_range("Массив пуст");//Вывод ошибки о переполнении 
        }
        else {
            size--;
        }
    }

    T& front() {
        return elements[0];
    }

    T& back() {
        return elements[size - 1];
    }

    void print() {
        for (int i = 0; i < size; i++)
        {
            cout << elements[i] << endl;
        }
        cout << endl;
    }

    class Iterator {
    private:
        T* ptr;
    public:
        Iterator(T* ptr) :ptr(ptr) {}

        T& operator*() const{
            return *ptr;
        }

        Iterator& operator++() {
            ++ptr;
            return *this;
        }

        Iterator& operator--() {
            --ptr;
            return *this;
        }

        bool operator ==(const Iterator& other) {
            return this->ptr == other.ptr;
        }

        bool operator !=(const Iterator& other) {
            return this->ptr != other.ptr;
        }
    };

    Iterator begin() {
        return Iterator(elements);
    }

    Iterator end() {
        return Iterator(elements+size);
    }
};



int main()
{
    setlocale(LC_ALL, "rus");
    srand(time(NULL));

    MyDeque <int> que1;

    que1.pushBack(1);
    que1.pushBack(12);
    que1.pushBack(14);
    que1.pushBack(71);
    que1.pushBack(1);
    que1.pushBack(12);
    que1.pushBack(14);
    que1.pushBack(71);
    que1.pushBack(0);
    que1.pushBack(0);
    que1.print();
    que1.pushFront(2);
    que1.print();
    //que1.popBack();
    //que1.print();

    /*MyDeque <int> que2;

    que2.pushBack(1);
    que2.pushBack(12);
    que2.pushBack(14);
    que2.pushBack(71);

    cout << (que1 == que2) << endl;*/

}
